class Solution{
public:
    int isValid(vector<vector<int>> mat){
        bool ans=true;
        bool an=true;
        for(int i=0;i<9;i++){
            ans=checkRow(mat,i);
            if(!ans){
                return false;
            }
            an=checkCol(mat,i);
            if(!an){
                return false;
            }
        }
        
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                    if(!checkSudoku(mat,i-i%3,j-j%3)){
                        return false;
                        break;
                    }
                }
        }

            return true;
    }
        
    bool checkRow(vector<vector<int>> mat, int i)
    {
        unordered_set<int> s;
        
        for(int j = 0;j<9;j++)
        {
            if (mat[i][j] == 0)
            {
                continue;
            }
            if (s.find(mat[i][j]) != s.end())
            {
                return false;
            }
            else
            {
                s.insert(mat[i][j]);
            }
        }
        return true;
    }
    bool checkCol(vector<vector<int>> mat, int i)
    {
        unordered_set<int> s;
        
        for(int j = 0;j<9;j++)
        {
            if (mat[j][i] == 0)
            {
                continue;
            }
            if (s.find(mat[j][i]) != s.end())
            {
                return false;
            }
            else
            {
                s.insert(mat[j][i]);
            }
        }
        return true;
    }
    
    bool checkSudoku(vector<vector<int>> mat,int startRow,int startCol)
    {
        
            unordered_set<int> set;
            
            for (int i = 0; i < 3; i++)
            {
                for(int j = 0; j < 3; j++)
                {
                    if (mat[startRow + i][startCol + j] == 0)
                    {
                        continue;
                    }
                    if (set.find(mat[startRow + i][startCol + j]) != set.end())
                    {
                        return false;
                        break;
                    }
                    else
                    {
                        set.insert(mat[startRow + i][startCol + j]);
                    }
                }
            }
            
            

        return true;
    }
};
